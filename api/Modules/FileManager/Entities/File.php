<?php

namespace Modules\FileManager\Entities;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use PHPUnit\Exception;

class File extends Model
{
    protected $table = 'file';

    protected $primaryKey = 'id';

    protected $guarded = [];


    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::created(function ($model) {
            \Cache::flush();
        });

        static::updated(function ($model) {
            \Cache::flush();
        });

        static::deleted(function ($model) {
            \Cache::flush();
        });

    }


    /**
     * @param $model
     * @param $files
     * @param $dir
     * @param array $sizes
     * @param bool $set_img
     * @return bool[]
     */
    public static function moveFileFromAttachment($model, $files, $dir, $sizes = [], $set_img = true) {



        $main_img = null;

        if (count($files) > 0) {

            foreach ($files  as $file) {

                if ($file) {

                    if ($file['collection'] == 0) {
                        $main_img = $file['file'];
                    }

                    $check_exist = File::where('file', $file['file'])->where('directory', $dir);

                    if ($check_exist->count() > 0) {

                        $model->files()->updateOrCreate(['file' => $file['file']],[
                            'collection' => $file['collection'],
                            'link' => $file['link'],
                            'order' => $file['order']
                        ]);

                    } else {
                        // attachment directory
                        $old = 'attachment/' . $file['file'];

                        if (Storage::disk('public')->exists($old)) {


                            if ($file['mime_type'] == 'image') {
                                // copy original image to diff size
                                foreach ($sizes as $size) {

                                    $copy = Storage::disk('public')->copy($old,  $dir . '/' . $model->id . '/' . $size . '/' . $file['file']);
                                    if ($copy) {
                                        $copy = \Intervention\Image\Facades\Image::make(storage_path('app/public/'. $dir . '/' . $model->id . '/' . $size . '/' . $file['file']));
                                        $copy->resize($size, $size);
                                        $copy->save();
                                    }
                                }
                            }

                            $new =  $dir . '/' . $model->id . '/' . $file['file'];

                            $move = Storage::disk('public')->move($old, $new); // Move Main Image

                            if ($move) {

                                $model->files()->create([
                                    'created_by' => Auth::id(),
                                    'file' => $file['file'],
                                    'collection' => $file['collection'],
                                    'directory' => $dir,
                                    'size' => $file['mime_type'] == 'image' ? json_encode($sizes): NULL,
                                    'link' => $file['link'],
                                    'caption' => $file['caption'],
                                    'order' => $file['order']
                                ]);

                            }

                        }
                    }
                }
            }

            if ($set_img) {

                $model->img = $main_img;
                $model->save();
            }
        }

        return ['status' => true];
    }


    // File Relation
    public function fileable()
    {
        return $this->morphTo();
    }
}
